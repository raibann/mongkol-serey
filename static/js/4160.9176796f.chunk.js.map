{"version":3,"file":"static/js/4160.9176796f.chunk.js","mappings":"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","sources":["pages/Orders/pages/QuotationForm/index.tsx"],"sourcesContent":["import {\n  Paper,\n  Stack,\n  Grid,\n  Typography,\n  Button,\n  alpha,\n  useTheme,\n  MenuItem,\n  TextFieldProps,\n} from '@mui/material';\nimport { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { CusIconButton } from 'components/CusIconButton';\nimport LabelTextField from 'components/LabelTextField';\nimport SecondaryPageHeader from 'components/PageHeader/SecondaryPageHeader';\nimport { Add, Trash } from 'iconsax-react';\nimport React from 'react';\nimport { Controller, useFieldArray, useForm } from 'react-hook-form';\nimport THEME_UTIL from 'utils/theme-util';\n\nexport interface IFormQuotation {\n  id: string;\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  event: string;\n  location: string;\n  total: number;\n  quotationItems: QuotationItems[];\n}\nexport interface QuotationItems {\n  productName: string;\n  qty: number;\n  unit: string;\n  price: number;\n  subTotal: number;\n  remark: string;\n}\n\nconst PACKAGE_ITEM_GRID = 11 / 5;\n\nconst QuotationForm = () => {\n  const theme = useTheme();\n\n  // React Hook Form\n  const { control } = useForm<IFormQuotation>({\n    defaultValues: {\n      quotationItems: [\n        {\n          productName: '',\n          qty: 0,\n          unit: '',\n          price: 0,\n          subTotal: 0,\n          remark: '',\n        },\n      ],\n    },\n  });\n  const quotationItemsFields = useFieldArray({\n    name: 'quotationItems',\n    control: control,\n  });\n\n  return (\n    <>\n      <SecondaryPageHeader title='Create New Quotation' />\n\n      <Paper component={Stack} m={3} mt={0} p={2} alignItems='center'>\n        <Grid container maxWidth='sm' spacing={2} alignItems='center'>\n          <Grid item xs={6}>\n            <Controller\n              control={control}\n              name='firstName'\n              render={({ field, fieldState }) => (\n                <LabelTextField\n                  label='First name'\n                  size='small'\n                  fieldState={fieldState}\n                  {...field}\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Controller\n              control={control}\n              name='lastName'\n              render={({ field, fieldState }) => (\n                <LabelTextField\n                  label='Last name'\n                  size='small'\n                  fieldState={fieldState}\n                  {...field}\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <Controller\n              control={control}\n              name='phoneNumber'\n              render={({ field, fieldState }) => (\n                <LabelTextField\n                  label='Phone number'\n                  size='small'\n                  fieldState={fieldState}\n                  {...field}\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <Controller\n              control={control}\n              name='event'\n              render={({ field, fieldState }) => (\n                <LabelTextField\n                  label='Event'\n                  size='small'\n                  fieldState={fieldState}\n                  {...field}\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <Controller\n              control={control}\n              name='location'\n              render={({ field, fieldState }) => (\n                <LabelTextField\n                  label='Location'\n                  size='small'\n                  fieldState={fieldState}\n                  {...field}\n                />\n              )}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            display='flex'\n            alignItems='center'\n            columnGap={2}\n            mt={2}\n          >\n            <Typography>Packages</Typography>\n            <Button\n              onClick={() =>\n                quotationItemsFields.append({\n                  productName: '',\n                  qty: 0,\n                  unit: '',\n                  price: 0,\n                  subTotal: 0,\n                  remark: '',\n                })\n              }\n              size='small'\n              variant='contained'\n              disableElevation\n              sx={{ minWidth: 0, color: 'common.white', p: 0.25 }}\n            >\n              <Add />\n            </Button>\n          </Grid>\n\n          {quotationItemsFields.fields.map((e, i) => (\n            <Grid container item spacing={1} key={e.id}>\n              <Grid item xs={PACKAGE_ITEM_GRID + 0.75}>\n                <Controller\n                  control={control}\n                  name={`quotationItems.${i}.productName`}\n                  render={({ field, fieldState }) => (\n                    <LabelTextField\n                      size='small'\n                      label={i === 0 ? 'Name' : undefined}\n                      fieldState={fieldState}\n                      {...field}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={PACKAGE_ITEM_GRID - 0.5}>\n                <Controller\n                  control={control}\n                  name={`quotationItems.${i}.qty`}\n                  render={({ field, fieldState }) => (\n                    <LabelTextField\n                      size='small'\n                      label={i === 0 ? 'Qty' : undefined}\n                      fieldState={fieldState}\n                      {...field}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={PACKAGE_ITEM_GRID - 0.5}>\n                <Controller\n                  control={control}\n                  name={`quotationItems.${i}.unit`}\n                  render={({ field, fieldState }) => (\n                    <LabelTextField\n                      size='small'\n                      label={i === 0 ? 'Unit' : undefined}\n                      fieldState={fieldState}\n                      {...field}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={PACKAGE_ITEM_GRID - 0.5}>\n                <Controller\n                  control={control}\n                  name={`quotationItems.${i}.price`}\n                  render={({ field, fieldState }) => (\n                    <LabelTextField\n                      size='small'\n                      label={i === 0 ? 'Price' : undefined}\n                      fieldState={fieldState}\n                      {...field}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={PACKAGE_ITEM_GRID + 0.75}>\n                <Controller\n                  control={control}\n                  name={`quotationItems.${i}.remark`}\n                  render={({ field, fieldState }) => (\n                    <LabelTextField\n                      size='small'\n                      label={i === 0 ? 'Remark' : undefined}\n                      fieldState={fieldState}\n                      {...field}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={1} textAlign='end'>\n                <Stack spacing={1}>\n                  {i === 0 && (\n                    <Typography fontSize={14} visibility='hidden'>\n                      Action\n                    </Typography>\n                  )}\n                  <CusIconButton\n                    onClick={() => quotationItemsFields.remove(i)}\n                    sx={{\n                      width: 40,\n                      height: 40,\n                      boxShadow: 0,\n                      background: alpha(theme.palette.error.main, 0.1),\n                    }}\n                  >\n                    <Trash\n                      size='20'\n                      color={theme.palette.error.main}\n                      variant='Bold'\n                    />\n                  </CusIconButton>\n                </Stack>\n              </Grid>\n            </Grid>\n          ))}\n\n          <Grid item xs={6}>\n            <Button\n              size='large'\n              variant='outlined'\n              sx={{ width: '100%', mt: 2 }}\n            >\n              Cancel\n            </Button>\n          </Grid>\n          <Grid item xs={6}>\n            <Button\n              size='large'\n              variant='contained'\n              sx={{\n                mt: 2,\n                width: '100%',\n                background: THEME_UTIL.goldGradientMain,\n              }}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </>\n  );\n};\n\nexport default QuotationForm;\n"],"names":["theme","useTheme","control","useForm","defaultValues","quotationItems","productName","qty","unit","price","subTotal","remark","quotationItemsFields","useFieldArray","name","title","component","Stack","m","mt","p","alignItems","container","maxWidth","spacing","item","xs","render","field","fieldState","label","size","display","columnGap","onClick","append","variant","disableElevation","sx","minWidth","color","fields","map","e","i","PACKAGE_ITEM_GRID","undefined","textAlign","fontSize","visibility","remove","width","height","boxShadow","background","alpha","palette","error","main","id","THEME_UTIL"],"sourceRoot":""}
{"version":3,"file":"static/js/6629.bedbf6cd.chunk.js","mappings":"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","sources":["api/customer.ts","api/telegram.ts","components/CusDialog/ErrorDialog.tsx","components/UploadButton/index.tsx","hook/useError.tsx","pages/Customers/pages/potential/NewPotentialForm.tsx","utils/data-util.tsx","utils/upload-image-util.tsx"],"sourcesContent":["import HttpUtil from 'utils/http-util';\nimport { ROUTE_API } from 'utils/route-util';\n\nconst CUSTOMER_API = {\n  getCustomerList: async ({\n    page,\n    search,\n    size,\n    type,\n  }: {\n    page?: number;\n    size?: number;\n    search?: string;\n    type: string;\n  }) => {\n    const res: ICustomer.ICustomerRespone = await HttpUtil.get(\n      ROUTE_API.customersList,\n      {\n        params: {\n          page: page,\n          size: size || 10,\n          search: search,\n          customerType: type,\n        },\n      }\n    );\n    return res;\n  },\n  getCustomerDetails: async ({ id }: { id?: number }) => {\n    const res: ICustomer.ICustomerDetails = await HttpUtil.get(\n      ROUTE_API.customerDetails.replace(':id', `${id}`)\n    );\n    return res;\n  },\n  postNewCustomer: async ({\n    cusRequest,\n  }: {\n    cusRequest: ICustomer.ICustomerRequest;\n  }) => {\n    const res: ICustomer.ICustomerRequest = await HttpUtil.post(\n      ROUTE_API.addCustomer,\n      cusRequest\n    );\n    return res;\n  },\n  updateCustomer: async ({\n    cusRequest,\n    id,\n  }: {\n    cusRequest: ICustomer.ICustomerRequest;\n    id: string;\n  }) => {\n    const res: ICustomer.ICustomerDetails = await HttpUtil.put(\n      ROUTE_API.updateCustomer.replace(':id', `${id}`),\n      cusRequest\n    );\n    return res;\n  },\n  deleteCustomer: async ({ id }: { id: number }) => {\n    const res: ICustomer.ICustomerDetails = await HttpUtil.delete(\n      ROUTE_API.deletCustomer.replace(':id', `${id}`)\n    );\n    return res;\n  },\n};\nexport default CUSTOMER_API;\n","import axios, { AxiosResponse } from 'axios';\n\nconst BOT_ID = '5683327648:AAForuzEywsdCCXFlR04En_Gl7pD34poVl4';\nconst CHAT_ID = '-4033752446';\n\nconst TELEGRAM_API = {\n  uploadFile: async (file: File) => {\n    let data = new FormData();\n    data.append('document', file);\n    data.append('chat_id', CHAT_ID);\n    const sendDocRes: AxiosResponse<ITelegram.ISendDocumentResponse> =\n      await axios.post(\n        `https://api.telegram.org/bot${BOT_ID}/sendDocument`,\n        data\n      );\n    const res: AxiosResponse<ITelegram.IGetFileResponse> = await axios.post(\n      `https://api.telegram.org/bot${BOT_ID}/getFile`,\n      {\n        file_id: sendDocRes.data.result.document.file_id,\n      }\n    );\n    return {\n      path: `https://api.telegram.org/file/bot${BOT_ID}/${res.data.result.file_path}`,\n    };\n  },\n};\n\nexport default TELEGRAM_API;\n","import {\n  Button,\n  Dialog,\n  DialogContent,\n  DialogProps,\n  Stack,\n  Typography,\n} from '@mui/material';\nimport useResponsive from 'hook/useResponsive';\nimport { EmojiSad } from 'iconsax-react';\nimport theme from 'theme/theme';\n\ninterface IErrorDialog extends DialogProps {\n  errorTitle?: string;\n  errorMessage: string;\n  onCloseDialog: () => void;\n}\nconst ErrorDialog = (props: IErrorDialog) => {\n  const { open, errorMessage, errorTitle, onCloseDialog, onClose, ...rest } =\n    props;\n\n  const { isSmDown } = useResponsive();\n  return (\n    <Dialog\n      open={open}\n      fullWidth\n      maxWidth='xs'\n      onClose={onCloseDialog}\n      {...rest}\n    >\n      <DialogContent>\n        <Stack alignItems={'center'} sx={{ px: 4 }} spacing={2}>\n          <EmojiSad\n            size={isSmDown ? '40' : '80'}\n            color={theme.palette.primary.main}\n            variant='Bulk'\n          />\n          <Typography\n            variant={isSmDown ? 'subtitle1' : 'h5'}\n            noWrap\n            sx={{ fontWeight: (theme) => theme.typography.fontWeightBold }}\n          >\n            {errorTitle || 'OOP!'}\n          </Typography>\n          <Typography\n            sx={{ color: (theme) => theme.palette.error.main }}\n            textAlign='center'\n            variant={isSmDown ? 'caption' : 'h5'}\n          >\n            {errorMessage}\n          </Typography>\n          <Button\n            onClick={onCloseDialog}\n            variant='contained'\n            sx={{ borderRadius: 3, px: 3, boxShadow: 0 }}\n          >\n            <Typography color='white' sx={{ textTransform: 'capitalize' }}>\n              OK, cool\n            </Typography>\n          </Button>\n        </Stack>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default ErrorDialog;\n","import { Stack, Avatar, Typography, Button } from '@mui/material';\nimport { Camera } from 'iconsax-react';\nimport { uploadImage } from 'utils/upload-image-util';\n\ninterface IUploadButtonProps {\n  label?: string;\n  src?: string;\n  onChange?: (dataUrl: string, file: File) => void;\n}\n\nconst UploadButton = ({\n  label,\n  src,\n  onChange = () => null,\n}: IUploadButtonProps) => {\n  return (\n    <Stack width='100%' alignItems='center' spacing={1}>\n      <Button\n        component='label'\n        sx={{\n          p: 1.5,\n          borderRadius: '50%',\n          border: 'dashed 1px',\n          borderColor: 'divider',\n          bgcolor: 'transparent',\n        }}\n        color='inherit'\n      >\n        <Avatar\n          src={src}\n          sx={{\n            width: 135,\n            height: 135,\n            cursor: 'pointer',\n            bgcolor: 'grey.100',\n          }}\n        >\n          <Stack\n            justifyContent='center'\n            alignItems='center'\n            spacing={1}\n            color='grey.500'\n          >\n            <Camera variant='Bulk' size={28} />\n            <Typography variant='subtitle2' textTransform='none'>\n              Upload Photo\n            </Typography>\n          </Stack>\n        </Avatar>\n        <input\n          type='file'\n          hidden\n          accept='image/jpeg, image/png'\n          onChange={(e) => uploadImage(e, onChange)}\n        />\n      </Button>\n      <Typography\n        color='text.secondary'\n        variant='subtitle2'\n        whiteSpace='pre-line'\n        textAlign='center'\n      >\n        {label ||\n          `Allowed *.jpeg, *.jpg, *.png\n        max size of 2MB`}\n      </Typography>\n    </Stack>\n  );\n};\n\nexport default UploadButton;\n","import { useState } from 'react';\n\nexport default function useError() {\n  const [errorState, setErorrState] = useState<{\n    message: string;\n    error: boolean;\n  }>({\n    message: 'Something went wrong',\n    error: false,\n  });\n  return {\n    errorState,\n    setErorrState,\n  };\n}\n","import { LoadingButton } from '@mui/lab';\nimport {\n  Paper,\n  Container,\n  Stack,\n  MenuItem,\n  Button,\n  Skeleton,\n} from '@mui/material';\nimport { useRequest } from 'ahooks';\nimport CUSTOMER_API from 'api/customer';\nimport TELEGRAM_API from 'api/telegram';\nimport ErrorDialog from 'components/CusDialog/ErrorDialog';\nimport CusTextField from 'components/CusTextField';\nimport LabelTextField from 'components/LabelTextField';\nimport SecondaryPageHeader from 'components/PageHeader/SecondaryPageHeader';\nimport UploadButton from 'components/UploadButton';\nimport useError from 'hook/useError';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  EnumCustomerType,\n  EnumGenderType,\n  EnumSocialType,\n} from 'utils/data-util';\nimport { ROUTE_PATH } from 'utils/route-util';\nimport THEME_UTIL from 'utils/theme-util';\n\ninterface INewPotentialInput {\n  id?: string | number;\n  customerName: string;\n  location: string;\n  phoneNumber: string;\n  gender: string;\n  social: string;\n  socialType: string;\n  note: string;\n  images: string;\n}\n\nexport default function NewPotential() {\n  // State\n  /* Hooks */\n  const { errorState, setErorrState } = useError();\n  const { control, handleSubmit, setValue, reset, watch } =\n    useForm<INewPotentialInput>();\n  const navigate = useNavigate();\n  const params = useParams();\n  const paramId = params && params.id;\n  // Request APIs\n\n  // --- create\n  const { loading: isLoadingCreate, run: fecthData } = useRequest(\n    CUSTOMER_API.postNewCustomer,\n    {\n      manual: true,\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: (data) =>\n        data && navigate(ROUTE_PATH.customers.potentialCustomers),\n    }\n  );\n\n  // --- update\n  const { loading: isLoadingUpdate, run: fetchUpdate } = useRequest(\n    CUSTOMER_API.updateCustomer,\n    {\n      manual: true,\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: () => {\n        navigate(ROUTE_PATH.customers.potentialCustomers);\n      },\n    }\n  );\n\n  // --- detials\n  const { loading: isLoadingDetails } = useRequest(\n    async () =>\n      await CUSTOMER_API.getCustomerDetails({\n        id: (paramId && +paramId) || undefined,\n      }),\n    {\n      manual: false,\n      ready: paramId !== undefined,\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: (data) => {\n        const social =\n          data.customer.telegram_name || data.customer.facebook_name;\n        const socialType = data.customer.telegram_name\n          ? EnumSocialType.TG\n          : EnumSocialType.FB;\n        setValue('customerName', data.customer.customer_name);\n        setValue('location', data.customer.location);\n        setValue('gender', data.customer.gender || EnumGenderType.OTHER);\n        setValue('phoneNumber', data.customer.contact_number);\n        setValue('socialType', socialType);\n        setValue('social', social);\n        setValue('images', data.customer.images);\n        setValue('note', data.customer.remarks || '');\n      },\n    }\n  );\n\n  // --- upload\n  const { run: runUpload, loading: loadingUpload } = useRequest(\n    TELEGRAM_API.uploadFile,\n    {\n      manual: true,\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: (res) => {\n        setValue('images', res.path);\n      },\n    }\n  );\n\n  /* Methods */\n  const onSubmit = (data: INewPotentialInput) => {\n    // console.log(data);\n    const telegram = data.socialType === EnumSocialType.TG ? data.social : '';\n    const facebook = data.socialType === EnumSocialType.FB ? data.social : '';\n    if (params.id) {\n      fetchUpdate({\n        id: params.id,\n        cusRequest: {\n          customer_name: data.customerName,\n          facebook_name: facebook,\n          telegram_name: telegram,\n          gender: data.gender,\n          contact_number: data.phoneNumber,\n          customerType: EnumCustomerType.POTENTIAL_CUSTOMER,\n          location: data.location,\n          remarks: data.note,\n          images: data.images,\n          commune: '',\n          district: '',\n          house: '',\n          province: '',\n          street: '',\n        },\n      });\n    } else {\n      fecthData({\n        cusRequest: {\n          customer_name: data.customerName,\n          facebook_name: facebook,\n          telegram_name: telegram,\n          contact_number: data.phoneNumber,\n          gender: data.gender,\n          customerType: EnumCustomerType.POTENTIAL_CUSTOMER,\n          location: data.location,\n          remarks: data.note,\n          images: data.images,\n          commune: '',\n          district: '',\n          house: '',\n          province: '',\n          street: '',\n        },\n      });\n    }\n  };\n\n  const onReset = () => {\n    reset({\n      customerName: '',\n      location: '',\n      phoneNumber: '',\n      gender: EnumGenderType.OTHER,\n      social: '',\n      socialType: EnumSocialType.TG,\n      note: '',\n    });\n  };\n\n  return (\n    <>\n      <ErrorDialog\n        open={errorState.error}\n        onCloseDialog={() => {\n          setErorrState({\n            error: !errorState.error,\n            message: errorState.message,\n          });\n        }}\n        errorTitle='Failed Authentication'\n        errorMessage={'Something went wrong!'}\n      />\n      <SecondaryPageHeader\n        title={params.id ? 'Update Potential' : 'Create New Potential'}\n      />\n      <Paper\n        sx={{\n          m: 3,\n          mt: 0,\n          p: 2,\n        }}\n      >\n        <Container\n          maxWidth='sm'\n          component={'form'}\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <Stack mx='auto' mb={2}>\n            <UploadButton\n              src={watch('images')}\n              onChange={(dataUrl, file) => {\n                runUpload(file);\n                setValue('images', dataUrl);\n              }}\n            />\n          </Stack>\n\n          <Stack direction={'column'} spacing={2}>\n            {isLoadingDetails ? (\n              <>\n                {Array(4)\n                  .fill('')\n                  .map((_, i) => (\n                    <Stack direction={'row'} spacing={2} key={i}>\n                      <Skeleton\n                        variant='text'\n                        animation='wave'\n                        sx={{ fontSize: '1rem', width: '50%', height: '50px' }}\n                      />\n                      <Skeleton\n                        variant='text'\n                        animation='wave'\n                        sx={{ fontSize: '1rem', width: '50%', height: '50px' }}\n                      />\n                    </Stack>\n                  ))}\n              </>\n            ) : (\n              <>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='customerName'\n                    rules={{\n                      required: {\n                        value: true,\n                        message: 'Feild is required',\n                      },\n                    }}\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Customer Name'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='location'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Location'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='phoneNumber'\n                    rules={{\n                      required: {\n                        value: true,\n                        message: 'Feild is required',\n                      },\n                    }}\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Phone Number'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue={EnumGenderType.OTHER}\n                    control={control}\n                    name='gender'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField label='Gender'>\n                          <CusTextField\n                            select\n                            defaultValue={'Male'}\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            helperText={fieldState.error?.message}\n                            {...field}\n                          >\n                            <MenuItem value={EnumGenderType.OTHER}>\n                              Other\n                            </MenuItem>\n                            <MenuItem value={EnumGenderType.MALE}>\n                              Male\n                            </MenuItem>\n                            <MenuItem value={EnumGenderType.FEMALE}>\n                              Female\n                            </MenuItem>\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'}>\n                  <LabelTextField label='Social Media' size='small'>\n                    <Stack direction={'row'} spacing={1}>\n                      <Controller\n                        defaultValue='TG'\n                        control={control}\n                        name='socialType'\n                        render={({ field }) => {\n                          return (\n                            <CusTextField\n                              select\n                              defaultValue={''}\n                              SelectProps={{\n                                displayEmpty: true,\n                              }}\n                              size='small'\n                              sx={{ width: '40%' }}\n                              {...field}\n                            >\n                              <MenuItem value='FB'>Facebook</MenuItem>\n                              <MenuItem value='TG'>Telegram</MenuItem>\n                            </CusTextField>\n                          );\n                        }}\n                      />\n                      <Controller\n                        defaultValue=''\n                        control={control}\n                        name='social'\n                        render={({ field }) => {\n                          return (\n                            <CusTextField fullWidth size='small' {...field} />\n                          );\n                        }}\n                      />\n                    </Stack>\n                  </LabelTextField>\n                </Stack>\n                <Controller\n                  defaultValue=''\n                  control={control}\n                  name='note'\n                  render={({ field, fieldState }) => {\n                    return (\n                      <LabelTextField\n                        label='Note...'\n                        size='small'\n                        fieldState={fieldState}\n                        {...field}\n                        multiline\n                        rows={4}\n                      />\n                    );\n                  }}\n                />\n                <Stack\n                  direction={'row'}\n                  justifyContent={'space-between'}\n                  spacing={2}\n                  py={2}\n                >\n                  <Button\n                    size='large'\n                    variant='outlined'\n                    fullWidth\n                    onClick={onReset}\n                  >\n                    Reset\n                  </Button>\n                  <LoadingButton\n                    size='large'\n                    loading={\n                      isLoadingCreate || isLoadingUpdate || loadingUpload\n                    }\n                    type='submit'\n                    variant='contained'\n                    fullWidth\n                    sx={{ background: THEME_UTIL.goldGradientMain }}\n                  >\n                    Save\n                  </LoadingButton>\n                </Stack>\n              </>\n            )}\n          </Stack>\n        </Container>\n      </Paper>\n    </>\n  );\n}\n","import { GrUserAdmin } from 'react-icons/gr';\nimport { MdOutlineAdminPanelSettings } from 'react-icons/md';\nimport theme from 'theme/theme';\n\nconst listTitle = [\n  {\n    id: undefined,\n    title: 'កម្លាំងចុងភៅ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ថ្លៃជួលសម្ភារៈ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ឡានដឹក',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ហ្គាស',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'សាច់ជ្រូក',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'សាច់ទា',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'សាច់គោ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'សាច់មាន់',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'គ្រឿងសមុទ្រ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'សាច់ពពែ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ត្រីឆ្ដោរ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ត្រីឆ្ដុង',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ត្រីតុកែ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ត្រីសុងហឺ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ជ្រូកខ្វៃ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ទាខ្វៃ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'បន្លែ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ប្រហិតបាក់សៀប ជើងទា',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ចាហួយ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'រោងកម្មវិធី',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'កម្រាលព្រំ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ក្ដាពិស',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'អំពូល កង្ហារ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'អំពូល គ្រីសស្ទាល់',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ម៉ាស៊ីនភ្លើង',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ចាប់ក្រណាត់មុខរោង',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'សេវាពិធីការ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'នំបុ័ង',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ឆាខ្វៃ សណ្ដែក',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'បង្អែម',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ត្រីឆ្អើរ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ពងត្រី',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'ទឹកកកអនាម័យ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n  {\n    id: undefined,\n    title: 'អង្ករ',\n    totalPrice: 0,\n    paidBy: '',\n    other: '',\n  },\n];\n\nconst paidBy = [\n  'Cash',\n  'ABA',\n  'ACLEDA',\n  'WING',\n  'BAKONG',\n  'CANADIA',\n  'TRUE MONEY',\n  // 'SATHAPANA',\n  // 'WOORI',\n  // 'AMK',\n  // 'PRASAC',\n  // 'PHILLIP',\n  // 'PRINCE',\n  // 'HATTHA',\n  // 'CP Bank',\n  // 'VATTANAC',\n  // 'JTRUST ROYAL',\n  // 'FTB Bank',\n  // 'PPC Bank',\n  // 'CHIP MONG Bank',\n  // 'MOHANOKOR',\n  // 'SBI LY HOUR',\n  // 'MAY Bank',\n  // 'eMoney Agent',\n  // 'Pi Pay',\n];\n\nconst paidByColor: { [key: string]: string } = {\n  ACLEDA: '#143c6d',\n  ABA: '#005b7a',\n  WING: '#a4c535',\n  BAKONG: '#dc222c',\n  CANADIA: '#D61229',\n  Cash: '#BB9300',\n  'TRUE MONEY': '#f88a30',\n  // 'Pi Pay': '#ed288a',\n};\n\nconst foodList = [\n  'មហាសម្បត្តិទាំង៥',\n  'ឆាប៉ាវហុឺ តៅហ៊ូពងមាន់ 10ក្រឡ',\n  'ភ្លាម៉ាញ៉ាណេសាច់គោ ',\n  'បង្គាបំពងខ្ទឹមស',\n  'ត្រីឆ្ពុងចំហុយក្រូចឆ្មា ទឹកដោះគោឆៅ',\n  'ម្ជូរយួនបង្កង',\n  'បាយឆាគ្រាប់ឈូក & បាយស',\n  'បង្អែមសងខ្យា3ស្រទាប់',\n  'ក្ងានខ្វៃទឹកឃ្មុំ ទាខ្វៃប៉េកាំង',\n  'ឆាផ្សិតតុងកូវ បន្លែបញ្ជះពណ៍',\n  'ម្ជូរគ្រឿងពោះគោ',\n  'បាយឆាពងទាប្រៃ & បាយស',\n  'បង្អែមចេកខ្ទិះ ពងមាន់',\n  'ប្រហិតត្រីស្លាត',\n  'គាវបំពង',\n  'ប្រហិតអំពៅ',\n  'ទាផ្លិត ជ្រក់ឆៃថាវ',\n  'មាន់ទឹមចំហុយ',\n  'បង្គារុំស្បៃ',\n  'ត្រីសុងហឺចំហុយក្រូចឆ្មា',\n  'តុងយាំកូនកាត់',\n  'បាយឆាយ៉ាងចូវ បាយស',\n  'បង្អែមគ្រាប់ឈូក',\n  'បង្អែមត្នោត',\n  'ត្រីប្រម៉ាចៀន',\n  'តី្រប្រម៉ា ចំហុយពងទា',\n  'ត្រីបំពងសា្វយ ទឹកត្រីអំពិលទុំ',\n  'ម្ជូយួនគ្រឿងសមុទ្រ',\n  'រោងកម្មវិធីចាប់ក្រណាត់ម៉ូតថ្មី',\n  'អំពូលគ្រីស្តាល់',\n  'កង្ហារត្រជាក់',\n  'ព្រំក្រហមមួយផ្លុវដើរ',\n  'ទឹកកកអនាម័យ',\n  'ក្បាលជ្រូក១ មាន់ស្ងោរ១គូ',\n  'អាហារសែនកុងម៉ា',\n  'សេវាពិធីការ ៧នាក់',\n  'បបរពេលព្រឹក ២ខ្ទះ (លើស 25០$/ខ្ទះ)',\n  'បាយថ្ងៃត្រង់ ១១តុ (លើស 8០$/តុ)',\n  'ក្តាពីស 3$/m2',\n  'បន្ទប់ទឹកចល័ត 100$/pc',\n  'ត្រីប្រម៉ាចំហុយ',\n  'ត្រីបំពងឡប់ឡែ',\n  'ស៊ុបចាប់ឆាយគ្រឿងសមុទ្រ',\n  'ឆាឆ្អឹងជំនីបំពងបន្លែជូរអែម',\n  'តុងយាំគ្រឿងសមុទ្រ',\n  'ត្រីសុងហឺបំពងប្រាំរសជាតិ',\n  'ញាំជើងទាគ្រឿងសមុទ្រ',\n  'ទាខ្វៃប៉េកាំង',\n  'បាយសែនកុងម៉ា 1ថាស',\n  'ឆាបង្គា ខាត់ណាចិន',\n  'ត្រីក្រហមចំហុយមីសួរ',\n  'ស៊ុបក្រពះជ្រូកខ្ចី',\n  'ស៊ុបក្តាមផ្សិតមាស 10ក្រឡ',\n  'ត្រីឆ្ពុងចំហុយទឹកស៊ីអៀវចិន',\n];\nconst unitList = [\n  'តុ',\n  'ចាន',\n  'ខ្ទះ',\n  'នាក់',\n  'ឈុត',\n  'm²',\n  'គ្រឿង',\n  'ប្រឡោះ',\n  // `m${'2'.sup()}`,\n  'pcs',\n];\n\nconst eventList = [\n  'Wedding',\n  'Birthday',\n  'Party',\n  'House Warming',\n  'Engagement',\n];\n\nexport { paidBy, paidByColor, listTitle, foodList, unitList, eventList };\n\nexport const role = [\n  {\n    id: 1,\n    name: 'ROLE_SUPER_ADMIN',\n    description: 'Has access to everything',\n    icon: (\n      <GrUserAdmin\n        size={24}\n        style={{\n          position: 'relative',\n          left: 2,\n        }}\n      />\n    ),\n    disable: true,\n  },\n  {\n    id: 2,\n    name: 'ROLE_ADMIN',\n    description: 'No access to user management',\n    icon: (\n      <MdOutlineAdminPanelSettings\n        size={28}\n        color={theme.palette.common.black}\n      />\n    ),\n    disable: false,\n  },\n];\n\nexport enum MonthRanks {\n  'Jan' = 1,\n  'Feb' = 2,\n  'Mar' = 3,\n  'Apr' = 4,\n  'May' = 5,\n  'Jun' = 6,\n  'Jul' = 7,\n  'Aug' = 8,\n  'Sep' = 9,\n  'Oct' = 10,\n  'Nov' = 11,\n  'Dec' = 12,\n}\nexport const MonthKH: {\n  [key: string]: string;\n} = {\n  January: 'មករា',\n  February: 'កុម្ភៈ',\n  March: 'មិនា',\n  April: 'មេសា',\n  May: 'ឧសភា',\n  June: 'មិថុនា',\n  July: 'កក្កដា',\n  August: 'សីហា',\n  September: 'កញ្ញា',\n  October: 'តុលា',\n  November: 'វិច្ឆិកា',\n  December: 'ធ្នូ',\n};\n\nexport const PercentFilter: { [key: string]: number } = {\n  week: 0,\n  month: 1,\n  year: 2,\n};\n\n// Types\nexport enum EnumCustomerType {\n  POTENTIAL_CUSTOMER = 'POTENTIAL_CUSTOMER',\n  CUSTOMER = 'CUSTOMER',\n}\n\nexport enum EnumGenderType {\n  OTHER = 'OTHER',\n  MALE = 'MALE',\n  FEMALE = 'FEMALE',\n}\n\nexport enum EnumSocialType {\n  FB = 'FB',\n  TG = 'TG',\n}\n\nexport enum EnumStockType {\n  STOCK = 'STOCK',\n  NON_STOCK = 'NON_STOCK',\n}\n\nexport const StockTypeDescription: { [key: string]: string } = {\n  STOCK: 'មានក្នុងស្តុក',\n  NON_STOCK: 'មិនមានស្តុក',\n};\n\nexport const EXCHANGE_RATE = 4100;\n","// import { Route_Api } from './route-util';\n\nexport const uploadImage = (\n  e: React.ChangeEvent<HTMLInputElement>,\n  onSuccess: (result: string, file: File) => void\n) => {\n  e.preventDefault();\n  const imgType = ['png', 'jpg', 'jpeg'];\n\n  if (e.target) {\n    const file = e.target.files;\n\n    if (file) {\n      const reader = new FileReader();\n      if (\n        file[0]?.size <= 2 * 1024 * 1024 &&\n        imgType.some((el) => file[0]?.type.includes(el))\n      ) {\n        reader.readAsDataURL(file[0]);\n        reader.onload = () => onSuccess(reader.result as string, file[0]);\n      } else {\n        alert('Unsupported File');\n      }\n    }\n  }\n};\n\nexport const uploadImageMultiple = (\n  e: React.ChangeEvent<HTMLInputElement>,\n  onSuccess: (dataUrls: string[], files?: File[]) => void\n) => {\n  e.preventDefault();\n  const imgType = ['png', 'jpg', 'jpeg'];\n  let results: string[] = [];\n  let newFiles: File[] = [];\n  let unSupported: string[] = [];\n\n  if (e.target) {\n    const fileList = e.target.files;\n\n    if (fileList) {\n      for (let i = 0; i < fileList.length; i++) {\n        const reader = new FileReader();\n        if (\n          fileList[i].size <= 2 * 1024 * 1024 &&\n          imgType.some((el) => fileList[i].type.includes(el))\n        ) {\n          reader.readAsDataURL(fileList[i]);\n          reader.onload = () => {\n            const tmpFile = fileList[i];\n            let file = new File(\n              [tmpFile],\n              `${crypto.randomUUID()}-${tmpFile.name}`,\n              {\n                type: tmpFile.type,\n                lastModified: tmpFile.lastModified,\n              }\n            );\n\n            results.push(reader.result as string);\n            newFiles.push(file);\n          };\n        } else {\n          unSupported.push(fileList[i].name);\n        }\n      }\n      if (unSupported.length > 0) {\n        const joined = unSupported.join('\\n');\n        alert(`Unsupported files:\\n${joined}`);\n      }\n    }\n  }\n\n  setTimeout(() => {\n    onSuccess(results, newFiles);\n  }, 100);\n};\n\n// export function getImage(imgUrl?: string) {\n//   return imgUrl ? `${Route_Api.root}/api${imgUrl}` : '';\n// }\n\n// export function cutImagePath(path: string) {\n//   return path.replace(`${Route_Api.root}/api`, '');\n// }\n"],"names":["CUSTOMER_API","getCustomerList","page","search","size","type","HttpUtil","ROUTE_API","params","customerType","res","getCustomerDetails","id","postNewCustomer","cusRequest","updateCustomer","deleteCustomer","BOT_ID","TELEGRAM_API","uploadFile","file","data","FormData","append","axios","sendDocRes","file_id","result","document","path","file_path","props","open","errorMessage","errorTitle","onCloseDialog","rest","onClose","isSmDown","useResponsive","fullWidth","maxWidth","alignItems","sx","px","spacing","color","theme","variant","noWrap","fontWeight","typography","fontWeightBold","palette","error","main","textAlign","onClick","borderRadius","boxShadow","textTransform","label","src","onChange","width","component","p","border","borderColor","bgcolor","height","cursor","justifyContent","hidden","accept","e","uploadImage","whiteSpace","useError","useState","message","errorState","setErorrState","NewPotential","useForm","control","handleSubmit","setValue","reset","watch","navigate","useNavigate","useParams","paramId","useRequest","manual","onError","onSuccess","ROUTE_PATH","isLoadingCreate","loading","fecthData","run","isLoadingUpdate","fetchUpdate","isLoadingDetails","undefined","ready","social","customer","telegram_name","facebook_name","socialType","EnumSocialType","customer_name","location","gender","EnumGenderType","contact_number","images","remarks","runUpload","loadingUpload","title","m","mt","onSubmit","telegram","facebook","customerName","phoneNumber","EnumCustomerType","note","commune","district","house","province","street","mx","mb","dataUrl","direction","Array","fill","map","_","i","animation","fontSize","defaultValue","name","rules","required","value","render","field","fieldState","select","SelectProps","displayEmpty","helperText","multiline","rows","py","background","THEME_UTIL","MonthRanks","paidBy","paidByColor","ACLEDA","ABA","WING","BAKONG","CANADIA","Cash","unitList","eventList","EnumStockType","MonthKH","January","February","March","April","May","June","July","August","September","October","November","December","PercentFilter","week","month","year","StockTypeDescription","STOCK","NON_STOCK","preventDefault","target","files","reader","FileReader","some","el","includes","readAsDataURL","onload","alert"],"sourceRoot":""}
{"version":3,"file":"static/js/5245.b7a467f1.chunk.js","mappings":"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","sources":["api/customer.ts","pages/Customers/pages/NewCustomerForm.tsx"],"sourcesContent":["import HttpUtil from 'utils/http-util';\nimport { ROUTE_API } from 'utils/route-util';\n\nconst CUSTOMER_API = {\n  getCustomerList: async ({\n    page,\n    search,\n    size,\n    type,\n  }: {\n    page?: number;\n    size?: number;\n    search?: string;\n    type: string;\n  }) => {\n    const res: ICustomer.ICustomerRespone = await HttpUtil.get(\n      ROUTE_API.customersList,\n      {\n        params: {\n          page: page,\n          size: size || 10,\n          search: search,\n          customerType: type,\n        },\n      }\n    );\n    return res;\n  },\n  getCustomerDetails: async ({ id }: { id?: number }) => {\n    const res: ICustomer.ICustomerDetails = await HttpUtil.get(\n      ROUTE_API.customerDetails.replace(':id', `${id}`)\n    );\n    return res;\n  },\n  postNewCustomer: async ({\n    cusRequest,\n  }: {\n    cusRequest: ICustomer.ICustomerRequest;\n  }) => {\n    const res: ICustomer.ICustomerRequest = await HttpUtil.post(\n      ROUTE_API.addCustomer,\n      cusRequest\n    );\n    return res;\n  },\n  updateCustomer: async ({\n    cusRequest,\n    id,\n  }: {\n    cusRequest: ICustomer.ICustomerRequest;\n    id: string;\n  }) => {\n    const res: ICustomer.ICustomerDetails = await HttpUtil.put(\n      ROUTE_API.updateCustomer.replace(':id', `${id}`),\n      cusRequest\n    );\n    return res;\n  },\n  deleteCustomer: async ({ id }: { id: number }) => {\n    const res: ICustomer.ICustomerDetails = await HttpUtil.delete(\n      ROUTE_API.deletCustomer.replace(':id', `${id}`)\n    );\n    return res;\n  },\n};\nexport default CUSTOMER_API;\n","import { LoadingButton } from '@mui/lab';\nimport { Paper, Container, Stack, MenuItem, Button } from '@mui/material';\nimport { useRequest } from 'ahooks';\nimport CUSTOMER_API from 'api/customer';\nimport TELEGRAM_API from 'api/telegram';\nimport ErrorDialog from 'components/CusDialog/ErrorDialog';\nimport FormSkeleton from 'components/CusSkeleton/FormSkeleton';\nimport CusTextField from 'components/CusTextField';\nimport LabelTextField from 'components/LabelTextField';\nimport SecondaryPageHeader from 'components/PageHeader/SecondaryPageHeader';\nimport UploadButton from 'components/UploadButton';\nimport useError from 'hook/useError';\nimport useGeography from 'hook/useGeography';\nimport { useEffect } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  EnumCustomerType,\n  EnumGenderType,\n  EnumSocialType,\n} from 'utils/data-util';\nimport { ROUTE_PATH } from 'utils/route-util';\nimport THEME_UTIL from 'utils/theme-util';\n\ninterface INewCustomerInput {\n  id?: string | number;\n  customerName: string;\n  phoneNumber: string;\n  gender: string;\n  street: string;\n  house: string;\n  province: string;\n  district: string;\n  commune: string;\n  payment: string;\n  social: string;\n  socialType: string;\n  location: string;\n  images?: string;\n}\nexport default function NewCustomerForm() {\n  /* Hooks */\n  const { errorState, setErorrState } = useError();\n  const navigate = useNavigate();\n  const params = useParams();\n  const paramId = params && params.id;\n\n  const {\n    control,\n    handleSubmit,\n    setValue,\n    reset,\n    watch,\n    getValues,\n    resetField,\n  } = useForm<INewCustomerInput>();\n  const {\n    provinces,\n    districts,\n    communes,\n    setDistrictId,\n    setProvinceId,\n    communeLoading,\n    districtLoading,\n    provinceLoading,\n    errorGeo,\n  } = useGeography({\n    disName: getValues('district'),\n    proName: getValues('province'),\n  });\n\n  // Request APIs\n  // --- check error\n  useEffect(() => {\n    if (errorGeo) {\n      setErorrState(errorGeo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [errorGeo]);\n\n  // --- fetch details\n  const { loading: isLoadingDetails } = useRequest(\n    async () =>\n      await CUSTOMER_API.getCustomerDetails({\n        id: (paramId && +paramId) || undefined,\n      }),\n    {\n      manual: false,\n      ready: paramId !== undefined,\n      refreshDeps: [paramId],\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: (data) => {\n        const social =\n          data.customer.telegram_name || data.customer.facebook_name;\n        const socialType = data.customer.telegram_name\n          ? EnumSocialType.TG\n          : EnumSocialType.FB;\n        setValue('customerName', data.customer.customer_name);\n        setValue('location', data.customer.location);\n        setValue('gender', data.customer.gender || EnumGenderType.OTHER);\n        setValue('phoneNumber', data.customer.contact_number);\n        setValue('street', data.customer.street);\n        setValue('house', data.customer.house);\n        setValue('province', data.customer.province);\n        setValue('district', data.customer.district);\n        setValue('commune', data.customer.commune);\n        setValue('payment', data.customer.defaultPayment || '');\n        setValue('socialType', socialType);\n        setValue('social', social);\n        setValue('images', data.customer.images);\n      },\n    }\n  );\n\n  // --- fecth create\n  const { loading: isLoadingCreate, run: fecthCreate } = useRequest(\n    CUSTOMER_API.postNewCustomer,\n    {\n      manual: true,\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: (data) => data && navigate(ROUTE_PATH.customers.root),\n    }\n  );\n\n  // --- fecth update\n  const { loading: isLoadingUpdate, run: fetchUpdate } = useRequest(\n    CUSTOMER_API.updateCustomer,\n    {\n      manual: true,\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: () => {\n        navigate(ROUTE_PATH.customers.root);\n      },\n    }\n  );\n\n  // --- upload\n  const { run: runUpload, loading: loadingUpload } = useRequest(\n    TELEGRAM_API.uploadFile,\n    {\n      manual: true,\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: (res) => {\n        setValue('images', res.path);\n      },\n    }\n  );\n\n  /* Methods */\n  const onSubmit = (data: INewCustomerInput) => {\n    const telegram = data.socialType === EnumSocialType.TG ? data.social : '';\n    const facebook = data.socialType === EnumSocialType.FB ? data.social : '';\n\n    if (params.id) {\n      fetchUpdate({\n        id: params.id,\n        cusRequest: {\n          customer_name: data.customerName,\n          facebook_name: facebook,\n          telegram_name: telegram,\n          contact_number: data.phoneNumber,\n          gender: data.gender,\n          house: data.house,\n          street: data.street,\n          commune: data.commune,\n          district: data.district,\n          province: data.province,\n          location: data.location,\n          customerType: EnumCustomerType.CUSTOMER,\n          images: data.images,\n          defaultPayment: data.payment,\n        },\n      });\n    } else {\n      // console.log(data);\n      fecthCreate({\n        cusRequest: {\n          customer_name: data.customerName,\n          facebook_name: facebook,\n          telegram_name: telegram,\n          contact_number: data.phoneNumber,\n          gender: data.gender,\n          house: data.house,\n          street: data.street,\n          commune: data.commune,\n          district: data.district,\n          province: data.province,\n          location: data.location,\n          customerType: EnumCustomerType.CUSTOMER,\n          images: data.images,\n          defaultPayment: data.payment,\n        },\n      });\n    }\n  };\n\n  const onReset = () => {\n    reset({\n      customerName: '',\n      phoneNumber: '',\n      gender: EnumGenderType.OTHER,\n      street: '',\n      house: '',\n      province: '',\n      district: '',\n      commune: '',\n      payment: '',\n      social: '',\n      socialType: EnumSocialType.TG,\n      location: '',\n      images: '',\n    });\n  };\n\n  return (\n    <>\n      <ErrorDialog\n        open={errorState.error}\n        onCloseDialog={() => {\n          setErorrState({\n            error: !errorState.error,\n            message: '',\n          });\n        }}\n        errorMessage={errorState.message}\n      />\n      <SecondaryPageHeader\n        title={paramId ? 'Update Customer' : 'Create New Customer'}\n      />\n      <Paper\n        sx={{\n          m: 3,\n          mt: 0,\n          p: 2,\n        }}\n      >\n        <Container\n          maxWidth='sm'\n          component={'form'}\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <Stack direction={'column'} spacing={2}>\n            {isLoadingDetails ? (\n              <FormSkeleton />\n            ) : (\n              <>\n                <Stack direction={'row'} spacing={2}>\n                  <UploadButton\n                    src={watch('images')}\n                    onChange={(dataUrl, file) => {\n                      runUpload(file);\n                      setValue('images', dataUrl);\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='customerName'\n                    rules={{\n                      required: {\n                        value: true,\n                        message: 'Field is required',\n                      },\n                    }}\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Customer Name'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='location'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Location'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='phoneNumber'\n                    rules={{\n                      required: {\n                        value: true,\n                        message: 'Field is required',\n                      },\n                    }}\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Phone Number'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue={EnumGenderType.OTHER}\n                    control={control}\n                    name='gender'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField label='Gender'>\n                          <CusTextField\n                            select\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            helperText={fieldState.error?.message}\n                            {...field}\n                          >\n                            <MenuItem value={EnumGenderType.OTHER}>\n                              Other\n                            </MenuItem>\n                            <MenuItem value={EnumGenderType.MALE}>\n                              Male\n                            </MenuItem>\n                            <MenuItem value={EnumGenderType.FEMALE}>\n                              Female\n                            </MenuItem>\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='street'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Street'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='house'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='House'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='province'\n                    rules={{\n                      required: {\n                        value: true,\n                        message: 'Field is required',\n                      },\n                    }}\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField label='Province'>\n                          <CusTextField\n                            select\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            helperText={fieldState.error?.message}\n                            {...field}\n                          >\n                            <MenuItem value={''}>\n                              {provinceLoading\n                                ? 'Loading...'\n                                : 'Select Provicne'}\n                            </MenuItem>\n\n                            {!provinceLoading &&\n                              provinces?.map((p) => (\n                                <MenuItem\n                                  value={p.name}\n                                  key={p.name}\n                                  onClick={() => {\n                                    setProvinceId(`${p.id}`);\n                                    resetField('district');\n                                    resetField('commune');\n                                  }}\n                                >\n                                  {p.name}\n                                </MenuItem>\n                              ))}\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='district'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField label='District'>\n                          <CusTextField\n                            select\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            helperText={fieldState.error?.message}\n                            {...field}\n                          >\n                            <MenuItem value={''}>\n                              {districtLoading\n                                ? 'Loading...'\n                                : 'Select District'}\n                            </MenuItem>\n                            {!districtLoading &&\n                              districts?.map((d) => (\n                                <MenuItem\n                                  value={d.name}\n                                  key={d.name}\n                                  onClick={() => {\n                                    setDistrictId(`${d.id}`);\n                                    resetField('commune');\n                                  }}\n                                >\n                                  {d.name}\n                                </MenuItem>\n                              ))}\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='commune'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField label='Commune'>\n                          <CusTextField\n                            select\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            helperText={fieldState.error?.message}\n                            {...field}\n                          >\n                            <MenuItem value={''}>\n                              {communeLoading ? 'Loading...' : 'Select Commune'}\n                            </MenuItem>\n                            {!communeLoading &&\n                              communes?.map((d) => (\n                                <MenuItem value={d.name} key={d.name}>\n                                  {d.name}\n                                </MenuItem>\n                              ))}\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='payment'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Default Payment'\n                          fieldState={fieldState}\n                        >\n                          <CusTextField\n                            select\n                            defaultValue={''}\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            {...field}\n                          >\n                            <MenuItem value='Aba'>ABA</MenuItem>\n                            <MenuItem value='Acleda'>ACLEDA</MenuItem>\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'}>\n                  <LabelTextField label='Social Media' size='small'>\n                    <Stack direction={'row'} spacing={1}>\n                      <Controller\n                        defaultValue='TG'\n                        control={control}\n                        name='socialType'\n                        render={({ field }) => {\n                          return (\n                            <CusTextField\n                              select\n                              defaultValue={EnumSocialType.TG}\n                              SelectProps={{\n                                displayEmpty: true,\n                              }}\n                              size='small'\n                              sx={{ width: '40%' }}\n                              {...field}\n                            >\n                              <MenuItem value={EnumSocialType.FB}>\n                                Facebook\n                              </MenuItem>\n                              <MenuItem value={EnumSocialType.TG}>\n                                Telegram\n                              </MenuItem>\n                            </CusTextField>\n                          );\n                        }}\n                      />\n                      <Controller\n                        defaultValue=''\n                        control={control}\n                        name='social'\n                        render={({ field }) => {\n                          return (\n                            <CusTextField fullWidth size='small' {...field} />\n                          );\n                        }}\n                      />\n                    </Stack>\n                  </LabelTextField>\n                </Stack>\n                <Stack\n                  direction={'row'}\n                  justifyContent={'space-between'}\n                  spacing={2}\n                  py={2}\n                >\n                  <Button\n                    size='large'\n                    variant='outlined'\n                    fullWidth\n                    onClick={onReset}\n                  >\n                    Reset\n                  </Button>\n                  <LoadingButton\n                    size='large'\n                    loading={\n                      isLoadingCreate || isLoadingUpdate || loadingUpload\n                    }\n                    type='submit'\n                    variant='contained'\n                    fullWidth\n                    sx={{ background: THEME_UTIL.goldGradientMain }}\n                  >\n                    Save\n                  </LoadingButton>\n                </Stack>\n              </>\n            )}\n          </Stack>\n        </Container>\n      </Paper>\n    </>\n  );\n}\n"],"names":["CUSTOMER_API","getCustomerList","page","search","size","type","HttpUtil","ROUTE_API","params","customerType","res","getCustomerDetails","id","postNewCustomer","cusRequest","updateCustomer","deleteCustomer","NewCustomerForm","useError","errorState","setErorrState","navigate","useNavigate","useParams","paramId","useForm","control","handleSubmit","setValue","reset","watch","getValues","resetField","useGeography","disName","proName","provinces","districts","communes","setDistrictId","setProvinceId","communeLoading","districtLoading","provinceLoading","errorGeo","useEffect","isLoadingDetails","useRequest","undefined","manual","ready","refreshDeps","onError","e","error","message","onSuccess","data","social","customer","telegram_name","facebook_name","socialType","EnumSocialType","customer_name","location","gender","EnumGenderType","contact_number","street","house","province","district","commune","defaultPayment","images","loading","ROUTE_PATH","isLoadingCreate","fecthCreate","run","isLoadingUpdate","fetchUpdate","TELEGRAM_API","path","runUpload","loadingUpload","open","onCloseDialog","errorMessage","title","sx","m","mt","p","maxWidth","component","onSubmit","telegram","facebook","customerName","phoneNumber","EnumCustomerType","payment","direction","spacing","src","onChange","dataUrl","file","defaultValue","name","rules","required","value","render","field","fieldState","label","select","SelectProps","displayEmpty","helperText","map","onClick","d","width","fullWidth","justifyContent","py","variant","background","THEME_UTIL"],"sourceRoot":""}
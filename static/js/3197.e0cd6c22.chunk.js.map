{"version":3,"file":"static/js/3197.e0cd6c22.chunk.js","mappings":"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","sources":["api/supplier.ts","pages/Suppliers/pages/NewSupplierForm.tsx"],"sourcesContent":["import HttpUtil from 'utils/http-util';\nimport { ROUTE_API } from 'utils/route-util';\n\nconst SUPPLIER_API = {\n  getSupplierList: async ({\n    page,\n    search,\n    size,\n    type,\n  }: {\n    page?: number;\n    size?: number;\n    search?: string;\n    type: string;\n  }) => {\n    const res: ISupplier.ResSuppliers = await HttpUtil.get(\n      ROUTE_API.suppliersList,\n      {\n        params: {\n          page: page,\n          size: size || 10,\n          search: search,\n          type: type,\n        },\n      }\n    );\n    return res;\n  },\n  getSupplierDetails: async ({ id }: { id?: number }) => {\n    const res: ISupplier.ResSupplierDetails = await HttpUtil.get(\n      ROUTE_API.suppliersDetails.replace(':id', `${id}`)\n    );\n    return res;\n  },\n  postNewSupplier: async ({\n    payload,\n  }: {\n    payload: ISupplier.ReqSupplerAction;\n  }) => {\n    const res: ISupplier.ResSupplierDetails = await HttpUtil.post(\n      ROUTE_API.addNewSupplier,\n      payload\n    );\n    return res;\n  },\n  updateSupplier: async ({\n    payload,\n    id,\n  }: {\n    payload: ISupplier.ReqSupplerAction;\n    id: string;\n  }) => {\n    const res: ISupplier.ResSupplierDetails = await HttpUtil.put(\n      ROUTE_API.updateSupplier.replace(':id', `${id}`),\n      payload\n    );\n    return res;\n  },\n  deleteSupplier: async ({ id }: { id: number }) => {\n    const res: ISupplier.ResDelete = await HttpUtil.delete(\n      ROUTE_API.deleteSupplier.replace(':id', `${id}`)\n    );\n    return res;\n  },\n};\n\nexport default SUPPLIER_API;\n","import { LoadingButton } from '@mui/lab';\nimport { Paper, Container, Stack, Button, MenuItem } from '@mui/material';\nimport { useRequest } from 'ahooks';\nimport SUPPLIER_API from 'api/supplier';\nimport ErrorDialog from 'components/CusDialog/ErrorDialog';\nimport CusTextField from 'components/CusTextField';\nimport LabelTextField from 'components/LabelTextField';\nimport SecondaryPageHeader from 'components/PageHeader/SecondaryPageHeader';\nimport UploadButton from 'components/UploadButton';\nimport useGeography from 'hook/useGeography';\nimport { useEffect } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { EnumGenderType, EnumSocialType } from 'utils/data-util';\nimport { ROUTE_PATH } from 'utils/route-util';\nimport FormSkeleton from '../../../components/CusSkeleton/FormSkeleton';\nimport useError from 'hook/useError';\nimport TELEGRAM_API from 'api/telegram';\ninterface INewSuplierInput {\n  id?: string | number;\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  gender: string;\n  street: string;\n  house: string;\n  province: string;\n  district: string;\n  commune: string;\n  payment: string;\n  social: string;\n  socialType: string;\n  images: string;\n}\n\nconst NewSupplierForm = () => {\n  // State\n\n  /* Hooks */\n  const { errorState, setErorrState } = useError();\n  const { control, handleSubmit, setValue, resetField, getValues, watch } =\n    useForm<INewSuplierInput>();\n  const {\n    provinces,\n    districts,\n    communes,\n    setDistrictId,\n    setProvinceId,\n    communeLoading,\n    districtLoading,\n    provinceLoading,\n    errorGeo,\n  } = useGeography({\n    disName: getValues('district'),\n    proName: getValues('province'),\n  });\n  const navigate = useNavigate();\n  const params = useParams();\n  const paramId = params && params.id;\n\n  // Request APIs\n\n  // --- check error\n  useEffect(() => {\n    if (errorGeo) {\n      setErorrState(errorGeo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [errorGeo]);\n\n  // --- fecth details\n  const { loading: isLoadingDetails } = useRequest(\n    async () =>\n      await SUPPLIER_API.getSupplierDetails({\n        id: (paramId && +paramId) || undefined,\n      }),\n    {\n      manual: false,\n      ready: paramId !== undefined,\n      refreshDeps: [paramId],\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: (data) => {\n        const social = data.data.telegram || data.data.facebook;\n        const socialType = data.data.telegram\n          ? EnumSocialType.TG\n          : EnumSocialType.FB;\n\n        // Set to form\n        setValue('firstName', data.data.firstName);\n        setValue('lastName', data.data.lastName);\n        setValue('gender', data.data.gender || EnumGenderType.OTHER);\n        setValue('phoneNumber', data.data.phoneNumber);\n        setValue('street', data.data.street);\n        setValue('house', data.data.house);\n        setValue('province', data.data.province);\n        setValue('district', data.data.district);\n        setValue('commune', data.data.commune);\n        setValue('payment', data.data.defaultPayment);\n        setValue('socialType', socialType);\n        setValue('social', social || '');\n        setValue('images', data.data.images || '');\n      },\n    }\n  );\n\n  // --- create\n  const { loading: isLoadingCreate, run: fecthCreate } = useRequest(\n    SUPPLIER_API.postNewSupplier,\n    {\n      manual: true,\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: (data) => data && navigate(ROUTE_PATH.suppliers.root),\n    }\n  );\n\n  // --- update\n  const { loading: isLoadingUpdate, run: fetchUpdate } = useRequest(\n    SUPPLIER_API.updateSupplier,\n    {\n      manual: true,\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: () => {\n        navigate(ROUTE_PATH.suppliers.root);\n      },\n    }\n  );\n\n  // --- upload\n  const { run: runUpload, loading: loadingUpload } = useRequest(\n    TELEGRAM_API.uploadFile,\n    {\n      manual: true,\n      onError: (e: Error) =>\n        setErorrState({\n          error: true,\n          message: e.message,\n        }),\n      onSuccess: (res) => {\n        setValue('images', res.path);\n      },\n    }\n  );\n\n  /* Methods */\n  const onSubmit = (data: INewSuplierInput) => {\n    const telegram = data.socialType === EnumSocialType.TG ? data.social : '';\n    const facebook = data.socialType === EnumSocialType.FB ? data.social : '';\n    if (params.id) {\n      fetchUpdate({\n        id: params.id,\n        payload: {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          gender: data.gender,\n          phoneNumber: data.phoneNumber,\n          defaultPayment: data.payment,\n          district: data.district,\n          house: data.house,\n          province: `${data.province}`,\n          street: data.street,\n          commune: data.commune,\n          facebook: facebook,\n          telegram: telegram,\n          others: '',\n          images: data.images,\n        },\n      });\n    } else {\n      fecthCreate({\n        payload: {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          gender: data.gender,\n          phoneNumber: data.phoneNumber,\n          defaultPayment: data.payment,\n          district: data.district,\n          house: data.house,\n          province: `${data.province}`,\n          street: data.street,\n          commune: data.commune,\n          facebook: facebook,\n          telegram: telegram,\n          others: '',\n          images: data.images,\n        },\n      });\n    }\n  };\n  return (\n    <>\n      <ErrorDialog\n        open={errorState.error}\n        onCloseDialog={() => {\n          setErorrState({\n            error: !errorState.error,\n            message: '',\n          });\n        }}\n        errorMessage={errorState.message}\n      />\n      <SecondaryPageHeader\n        title={params.id ? 'Update Supplier' : 'Create New Supplier'}\n      />\n      <Paper\n        sx={{\n          m: 3,\n          mt: 0,\n          p: 2,\n        }}\n      >\n        <Container\n          maxWidth='sm'\n          component='form'\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <Stack direction={'column'} spacing={2}>\n            {isLoadingDetails ? (\n              <FormSkeleton />\n            ) : (\n              <>\n                <Stack direction={'row'} spacing={2}>\n                  <UploadButton\n                    src={watch('images')}\n                    onChange={(dataUrl, file) => {\n                      runUpload(file);\n                      setValue('images', dataUrl);\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='firstName'\n                    rules={{\n                      required: {\n                        value: true,\n                        message: 'Field is required',\n                      },\n                    }}\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Frist Name'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='lastName'\n                    rules={{\n                      required: {\n                        value: true,\n                        message: 'Field is required',\n                      },\n                    }}\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Last Name'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='phoneNumber'\n                    rules={{\n                      required: {\n                        value: true,\n                        message: 'Field is required',\n                      },\n                    }}\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Phone Number'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue={EnumGenderType.OTHER}\n                    control={control}\n                    name='gender'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField label='Gender'>\n                          <CusTextField\n                            select\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            helperText={fieldState.error?.message}\n                            {...field}\n                          >\n                            <MenuItem value={EnumGenderType.OTHER}>\n                              Other\n                            </MenuItem>\n                            <MenuItem value={EnumGenderType.MALE}>\n                              Male\n                            </MenuItem>\n                            <MenuItem value={EnumGenderType.FEMALE}>\n                              Female\n                            </MenuItem>\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='street'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Street'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='house'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='House'\n                          size='small'\n                          fieldState={fieldState}\n                          {...field}\n                        />\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue={''}\n                    control={control}\n                    name='province'\n                    rules={{\n                      required: {\n                        value: true,\n                        message: 'Field is required',\n                      },\n                    }}\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField label='Province'>\n                          <CusTextField\n                            select\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            helperText={fieldState.error?.message}\n                            {...field}\n                          >\n                            <MenuItem value={''}>\n                              {provinceLoading\n                                ? 'Loading...'\n                                : 'Select Provicne'}\n                            </MenuItem>\n\n                            {!provinceLoading &&\n                              provinces?.map((p) => (\n                                <MenuItem\n                                  value={p.name}\n                                  key={p.name}\n                                  onClick={() => {\n                                    setProvinceId(`${p.id}`);\n                                    resetField('district');\n                                    resetField('commune');\n                                  }}\n                                >\n                                  {p.name}\n                                </MenuItem>\n                              ))}\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='district'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField label='District'>\n                          <CusTextField\n                            select\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            helperText={fieldState.error?.message}\n                            {...field}\n                          >\n                            <MenuItem value={''}>\n                              {districtLoading\n                                ? 'Loading...'\n                                : 'Select District'}\n                            </MenuItem>\n                            {!districtLoading &&\n                              districts?.map((d) => (\n                                <MenuItem\n                                  value={d.name}\n                                  key={d.name}\n                                  onClick={() => {\n                                    setDistrictId(`${d.id}`);\n                                    resetField('commune');\n                                  }}\n                                >\n                                  {d.name}\n                                </MenuItem>\n                              ))}\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'} spacing={2}>\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='commune'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField label='Commune'>\n                          <CusTextField\n                            select\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            helperText={fieldState.error?.message}\n                            {...field}\n                          >\n                            <MenuItem value={''}>\n                              {communeLoading ? 'Loading...' : 'Select Commune'}\n                            </MenuItem>\n                            {!communeLoading &&\n                              communes?.map((d) => (\n                                <MenuItem value={d.name} key={d.name}>\n                                  {d.name}\n                                </MenuItem>\n                              ))}\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                  <Controller\n                    defaultValue=''\n                    control={control}\n                    name='payment'\n                    render={({ field, fieldState }) => {\n                      return (\n                        <LabelTextField\n                          label='Default Payment'\n                          fieldState={fieldState}\n                        >\n                          <CusTextField\n                            select\n                            defaultValue={''}\n                            SelectProps={{\n                              displayEmpty: true,\n                            }}\n                            size='small'\n                            {...field}\n                          >\n                            <MenuItem value='ABA'>ABA</MenuItem>\n                            <MenuItem value='ACLEDA'>ACLEDA</MenuItem>\n                          </CusTextField>\n                        </LabelTextField>\n                      );\n                    }}\n                  />\n                </Stack>\n                <Stack direction={'row'}>\n                  <LabelTextField label='Social Media' size='small'>\n                    <Stack direction={'row'} spacing={1}>\n                      <Controller\n                        defaultValue='TG'\n                        control={control}\n                        name='socialType'\n                        render={({ field }) => {\n                          return (\n                            <CusTextField\n                              select\n                              defaultValue={''}\n                              SelectProps={{\n                                displayEmpty: true,\n                              }}\n                              size='small'\n                              sx={{ width: '40%' }}\n                              {...field}\n                            >\n                              <MenuItem value='FB'>Facebook</MenuItem>\n                              <MenuItem value='TG'>Telegram</MenuItem>\n                            </CusTextField>\n                          );\n                        }}\n                      />\n                      <Controller\n                        defaultValue=''\n                        control={control}\n                        name='social'\n                        render={({ field }) => {\n                          return (\n                            <CusTextField fullWidth size='small' {...field} />\n                          );\n                        }}\n                      />\n                    </Stack>\n                  </LabelTextField>\n                </Stack>\n                <Stack\n                  direction={'row'}\n                  justifyContent={'space-between'}\n                  spacing={2}\n                  py={2}\n                >\n                  <Button variant='outlined' fullWidth>\n                    Reset\n                  </Button>\n                  <LoadingButton\n                    loading={\n                      isLoadingCreate || isLoadingUpdate || loadingUpload\n                    }\n                    type='submit'\n                    variant='contained'\n                    fullWidth\n                  >\n                    Save\n                  </LoadingButton>\n                </Stack>\n              </>\n            )}\n          </Stack>\n        </Container>\n      </Paper>\n    </>\n  );\n};\n\nexport default NewSupplierForm;\n"],"names":["SUPPLIER_API","getSupplierList","page","search","size","type","HttpUtil","ROUTE_API","params","res","getSupplierDetails","id","postNewSupplier","payload","updateSupplier","deleteSupplier","useError","errorState","setErorrState","useForm","control","handleSubmit","setValue","resetField","getValues","watch","useGeography","disName","proName","provinces","districts","communes","setDistrictId","setProvinceId","communeLoading","districtLoading","provinceLoading","errorGeo","navigate","useNavigate","useParams","paramId","useEffect","isLoadingDetails","useRequest","undefined","manual","ready","refreshDeps","onError","e","error","message","onSuccess","data","social","telegram","facebook","socialType","EnumSocialType","firstName","lastName","gender","EnumGenderType","phoneNumber","street","house","province","district","commune","defaultPayment","images","loading","ROUTE_PATH","isLoadingCreate","fecthCreate","run","isLoadingUpdate","fetchUpdate","TELEGRAM_API","path","runUpload","loadingUpload","open","onCloseDialog","errorMessage","title","sx","m","mt","p","maxWidth","component","onSubmit","payment","others","direction","spacing","src","onChange","dataUrl","file","defaultValue","name","rules","required","value","render","field","fieldState","label","select","SelectProps","displayEmpty","helperText","map","onClick","d","width","fullWidth","justifyContent","py","variant"],"sourceRoot":""}